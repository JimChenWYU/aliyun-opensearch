<?php

/*
 * This file is part of the jimchen/aliyun-opensearch.
 *
 * (c) JimChen <18219111672@163.com>
 *
 * This source file is subject to the MIT license that is bundled.
 */

namespace OpenSearch\Generated\Common;

/*
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Type\TType;

class Pageable
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $page = null;
    /**
     * @var int
     */
    public $size = null;
    /**
     * @var int
     */
    public $start = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        10 => [
          'var' => 'page',
          'type' => TType::I32,
          ],
        11 => [
          'var' => 'size',
          'type' => TType::I32,
          ],
        12 => [
          'var' => 'start',
          'type' => TType::I32,
          ],
        ];
        }
        if (is_array($vals)) {
            if (isset($vals['page'])) {
                $this->page = $vals['page'];
            }
            if (isset($vals['size'])) {
                $this->size = $vals['size'];
            }
            if (isset($vals['start'])) {
                $this->start = $vals['start'];
            }
        }
    }

    public function getName()
    {
        return 'Pageable';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        case 10:
          if (TType::I32 == $ftype) {
              $xfer += $input->readI32($this->page);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if (TType::I32 == $ftype) {
              $xfer += $input->readI32($this->size);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if (TType::I32 == $ftype) {
              $xfer += $input->readI32($this->start);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Pageable');
        if (null !== $this->page) {
            $xfer += $output->writeFieldBegin('page', TType::I32, 10);
            $xfer += $output->writeI32($this->page);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->size) {
            $xfer += $output->writeFieldBegin('size', TType::I32, 11);
            $xfer += $output->writeI32($this->size);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->start) {
            $xfer += $output->writeFieldBegin('start', TType::I32, 12);
            $xfer += $output->writeI32($this->start);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class AppReference
{
    public static $_TSPEC;

    /**
     * @var string
     */
    public $id = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        1 => [
          'var' => 'id',
          'type' => TType::STRING,
          ],
        ];
        }
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
        }
    }

    public function getName()
    {
        return 'AppReference';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        case 1:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->id);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AppReference');
        if (null !== $this->id) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class TraceInfo
{
    public static $_TSPEC;

    /**
     * @var string
     */
    public $requestId = null;
    /**
     * @var string
     */
    public $tracer = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        1 => [
          'var' => 'requestId',
          'type' => TType::STRING,
          ],
        3 => [
          'var' => 'tracer',
          'type' => TType::STRING,
          ],
        ];
        }
        if (is_array($vals)) {
            if (isset($vals['requestId'])) {
                $this->requestId = $vals['requestId'];
            }
            if (isset($vals['tracer'])) {
                $this->tracer = $vals['tracer'];
            }
        }
    }

    public function getName()
    {
        return 'TraceInfo';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        case 1:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->requestId);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->tracer);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TraceInfo');
        if (null !== $this->requestId) {
            $xfer += $output->writeFieldBegin('requestId', TType::STRING, 1);
            $xfer += $output->writeString($this->requestId);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->tracer) {
            $xfer += $output->writeFieldBegin('tracer', TType::STRING, 3);
            $xfer += $output->writeString($this->tracer);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class OpenSearchResult
{
    public static $_TSPEC;

    /**
     * @var string
     */
    public $result = null;
    /**
     * @var \OpenSearch\Generated\Common\TraceInfo
     */
    public $traceInfo = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        1 => [
          'var' => 'result',
          'type' => TType::STRING,
          ],
        3 => [
          'var' => 'traceInfo',
          'type' => TType::STRUCT,
          'class' => '\OpenSearch\Generated\Common\TraceInfo',
          ],
        ];
        }
        if (is_array($vals)) {
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
            if (isset($vals['traceInfo'])) {
                $this->traceInfo = $vals['traceInfo'];
            }
        }
    }

    public function getName()
    {
        return 'OpenSearchResult';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        case 1:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->result);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if (TType::STRUCT == $ftype) {
              $this->traceInfo = new \OpenSearch\Generated\Common\TraceInfo();
              $xfer += $this->traceInfo->read($input);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('OpenSearchResult');
        if (null !== $this->result) {
            $xfer += $output->writeFieldBegin('result', TType::STRING, 1);
            $xfer += $output->writeString($this->result);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->traceInfo) {
            if (!is_object($this->traceInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('traceInfo', TType::STRUCT, 3);
            $xfer += $this->traceInfo->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class OpenSearchException extends TException
{
    public static $_TSPEC;

    /**
     * @var int
     */
    public $code = null;
    /**
     * @var string
     */
    public $message = null;
    /**
     * @var string
     */
    public $requestId = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        1 => [
          'var' => 'code',
          'type' => TType::I32,
          ],
        2 => [
          'var' => 'message',
          'type' => TType::STRING,
          ],
        3 => [
          'var' => 'requestId',
          'type' => TType::STRING,
          ],
        ];
        }
        if (is_array($vals)) {
            if (isset($vals['code'])) {
                $this->code = $vals['code'];
            }
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['requestId'])) {
                $this->requestId = $vals['requestId'];
            }
        }
    }

    public function getName()
    {
        return 'OpenSearchException';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        case 1:
          if (TType::I32 == $ftype) {
              $xfer += $input->readI32($this->code);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->message);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if (TType::STRING == $ftype) {
              $xfer += $input->readString($this->requestId);
          } else {
              $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('OpenSearchException');
        if (null !== $this->code) {
            $xfer += $output->writeFieldBegin('code', TType::I32, 1);
            $xfer += $output->writeI32($this->code);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->message) {
            $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
            $xfer += $output->writeString($this->message);
            $xfer += $output->writeFieldEnd();
        }
        if (null !== $this->requestId) {
            $xfer += $output->writeFieldBegin('requestId', TType::STRING, 3);
            $xfer += $output->writeString($this->requestId);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}

class OpenSearchClientException extends TException
{
    public static $_TSPEC;

    public function __construct()
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = [
        ];
        }
    }

    public function getName()
    {
        return 'OpenSearchClientException';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if (TType::STOP == $ftype) {
                break;
            }
            switch ($fid) {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();

        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('OpenSearchClientException');
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();

        return $xfer;
    }
}
